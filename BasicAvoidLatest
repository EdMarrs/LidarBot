// This sketch code is based on the RPLIDAR driver library provided by RoboPeak
#include <RPLidar.h>

// You need to create an driver instance 
RPLidar lidar;


#define RPLIDAR_MOTOR 3 // The PWM pin for control the speed of RPLIDAR's motor.
                        // This pin should connected with the RPLIDAR's MOTOCTRL signal 
                       

#define TWI_FREQ 37390L  // reduce communication rate of I2C bus to 38.4 khz 
#include <Wire.h>

#define DEVICE_ADDRESS 0x05
#define REG_MANUFACTURER 0x08
#define REG_VERSION 0x00
#define REG_SENSOR_TYPE 0x10
#define NUM_BYTES 8
#define M1_POWER 0x45
#define M2_POWER 0x46

int getManufacturer(char *s) // return length of s
{
 int i = 0; // declare variable i which represents the index into the array; arrays begin at 0 which is why we set i=0
 // Read from device
 Wire.beginTransmission(DEVICE_ADDRESS); //begin transmission at DEVICE_ADDRESS (connect to device 0x05
 Wire.write(REG_MANUFACTURER); // write to the internal register you want to read; the manufacturer
 Wire.endTransmission(1); // send stop sequence (true(1)); master will release I2C bus

 Wire.requestFrom(DEVICE_ADDRESS, NUM_BYTES); // request 8 bytes from DEVICE_ADDRESS
 while (Wire.available()) // while available,
 {
   s[i++] = Wire.read(); // i++ increments i so we can store the new data in a sequential space on the array
 }
 s[i] = '\0'; // all strings in C are terminated with a zero (null character); need zero because zeros terminate strings and tells the print ln when to stop.
 return i; // length of the string contained in variable i 
}

int getSensorType(char *s)// return length of s
{
 int i; // declare variable i which represents the index into the array; arrays begin at 0 which is why we set i=0
 // Read from device
 Wire.beginTransmission(DEVICE_ADDRESS); //begin transmission at DEVICE_ADDRESS (connect to device 0x05
 Wire.write(REG_SENSOR_TYPE); // write to the internal register you want to read; the sensor type
 Wire.endTransmission(1); // send stop sequence (true(1)); master will release I2C bus

 Wire.requestFrom(DEVICE_ADDRESS, NUM_BYTES); // request 8 bytes from DEVICE_ADDRESS
 while (Wire.available()) // while available,
 {
   s[i++] = Wire.read(); // i++ increments i so we can store the new data in a sequential space on the array
 }
 s[i] = '\0'; // all strings in C are terminated with a zero (null character); need zero because zeros terminate strings and tells the print ln when to stop.
 return i; // length of the string contained in variable i 
}

int getVersionNumber(char *s)// return length of s
{
 int i; // declare variable i which represents the index into the array; arrays begin at 0 which is why we set i=0
 // Read from device
 Wire.beginTransmission(DEVICE_ADDRESS); // begin transmission at DEVICE_ADDRESS (connect to device 0x05
 Wire.write(REG_VERSION); // write to the internal register you want to read; the sensor version
 Wire.endTransmission(1); // send stop sequence (true(1)); master will release I2C bus

 Wire.requestFrom(DEVICE_ADDRESS, NUM_BYTES); // request 8 bytes from DEVICE_ADDRESS
 while (Wire.available()) // while available,
 {
   s[i++] = Wire.read(); // i++ increments i so we can store the new data in a sequential space on the array
 }
 s[i] = '\0'; // all strings in C are terminated with a zero (null character); need zero because zeros terminate strings and tells the print ln when to stop.
 return i; // length of the string contained in variable i 
}

//----------------------------------------------------------------------------------------------------------------------------------------------------------------
int motor1(int percent)
{
 // if percentage is between -100 and 100
 if (-100 <= percent && percent <= 100) 
 {
 // set motor 1 to percentage value
    Wire.beginTransmission(DEVICE_ADDRESS); //begin transmission at DEVICE_ADDRESS (connect to device 0x05
    Wire.write(M1_POWER); // write to motor 1 power address
    Wire.write(percent); // send the data byte; write the percent specified when function is called to above motor 
    Wire.endTransmission(0); // send a restart message to keep the connection alive (false(0)); master will not release bus
    return 1; // return true (1)
 }
 // else return false (0)
 else
    return 0;
}

int motor2(int percent)
{
 // if percentage is -100<=percent<=100
 if (-100 <= percent && percent <= 100) 
 {
 // then set motor 2 to percentage value
    Wire.beginTransmission(DEVICE_ADDRESS); //begin transmission at DEVICE_ADDRESS (connect to device 0x05)
    Wire.write(M2_POWER); // write to motor 2 power address
    Wire.write(percent); // send data byte; write the percent specified when function is called to the motor above
    Wire.endTransmission(0); // send a restart message to keep the connection alive (false(0)); master will not release bus
    return 1; // return true (1)
 }
 // else return false (0)
 else
    return 0;
}

//----------------------------------------------------------------------------------------------------------------------------------------------------------------
int motor1and2(int pwr1, int pwr2)
{
 //set motor 1 and motor 2 to move at the same time by setting power
 motor1(pwr1);
 motor2(pwr2);
} 
 
//----------------------------------------------------------------------------------------------------------------------------------------------------------------
void stop(void)
{
 //stop motors by setting power to 0
 motor1(0);
 motor2(0);
}

//----------------------------------------------------------------------------------------------------------------------------------------------------------------
void turnLeft(int pwr, long t) //t is in miliseconds
{
 //Turn robot left: send right wheel forward and left back
 // write the percent specified when function is called to motor 1 and motor 2
 motor1(-pwr);
 motor2(-pwr);
 delay(t);
 stop();
}

void turnRight(int pwr, long t) //t is in miliseconds
{
 //Turn robot right: send left wheel forward and right back
 // write the percent specified when function is called to motor 1 and motor 2
 motor1(pwr); 
 motor2(pwr);
 //delay(t);
 //stop();
}

//----------------------------------------------------------------------------------------------------------------------------------------------------------------
void straight(int pwr, long t) //t is in miliseconds
{
 motor1and2(pwr, -pwr);
 //delay(t);
 //stop();
}

//----------------------------------------------------------------------------------------------------------------------------------------------------------------
void reverse(int pwr, long t) //t is in miliseconds
{
 motor1and2(-pwr, pwr);
 delay(t);
 stop();
}




                        
void setup() {
  // bind the RPLIDAR driver to the arduino hardware serial
  //Serial.begin(9600);
  Wire.begin();
  
  
  lidar.begin(Serial1);
  // set pin modes
  pinMode(RPLIDAR_MOTOR, OUTPUT);
  
}
float minDistance = 1000;
float angleAtMinDist = 0;
int readingCount=0;
void loop() {
  
    
    char a[10];
    int length;
    length = getSensorType(a);
    
 if (IS_OK(lidar.waitPoint())) {
    //perform data processing here... 
    float distance = lidar.getCurrentPoint().distance;
    //Serial.println(distance);
    float angle = lidar.getCurrentPoint().angle;
    
    if (lidar.getCurrentPoint().startBit) {
      // a new scan, display the previous data...
      
      if(readingCount<5){
         
       if((angle<5||angle>355) && (distance > 0 &&  distance < minDistance)){
         readingCount++;
         
         
         
         
       }
       
       }
       if(readingCount>=5){
         readingCount=0;
         turnLeft(25,5000);
       }
         
       
    } 
    if(angle>175&&angle<185){
    readingCount=0;
    }
    straight(25,0);
 }
  
 
 
    
      

    
    
  else {
    analogWrite(RPLIDAR_MOTOR, 0); //stop the rplidar motor
    
    // try to detect RPLIDAR... 
    rplidar_response_device_info_t info;
    if (IS_OK(lidar.getDeviceInfo(info, 100))) {
       // detected...
       lidar.startScan();
       
       // start motor rotating at max allowed speed
       analogWrite(RPLIDAR_MOTOR, 255);
       delay(1000);
    }
  }
}
